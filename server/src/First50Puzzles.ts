function rcToLinear(r: number, c: number): number {
    return r * 5 + c + 1;
  }
const grids = [
    [
      [1,0,1,0,1],
      [1,0,1,0,1],
      [0,0,0,0,0],
      [0,0,0,0,0],
      [0,0,0,0,0],
    ],
    [
      [0,1,1,1,0],
      [0,0,0,0,0],
      [1,1,0,1,1],
      [0,0,0,0,0],
      [0,1,1,1,0],
    ],
    [
      [0,0,1,0,0],
      [0,0,1,0,0],
      [1,0,0,0,1],
      [0,0,1,0,0],
      [0,0,1,0,0],
    ],
    [
      [0,0,0,0,0],
      [0,0,0,0,0],
      [1,1,0,1,1],
      [0,0,0,0,0],
      [0,1,0,1,0],
    ],
    [
      [1,0,0,1,1],
      [0,0,0,1,0],
      [0,1,0,0,1],
      [0,0,0,0,0],
      [0,1,0,1,0],
    ],
    [
      [0,0,1,0,0],
      [0,1,1,1,0],
      [1,0,0,0,1],
      [0,0,0,0,0],
      [0,0,1,0,0],
    ],
    [
      [0,0,1,0,0],
      [1,0,0,0,0],
      [0,1,1,0,1],
      [1,0,0,0,0],
      [0,0,1,0,0],
    ],
    [
      [1,1,0,1,1],
      [0,0,0,0,0],
      [1,1,1,1,1],
      [0,0,1,0,0],
      [0,0,1,0,0],
    ],
    [
      [0,0,0,0,0],
      [0,1,0,1,0],
      [0,0,1,0,0],
      [0,1,0,1,0],
      [1,0,1,0,0],
    ],
    [
      [1,1,0,1,1],
      [0,1,1,1,0],
      [0,0,0,0,0],
      [0,0,0,0,0],
      [0,0,0,0,0],
    ],
    [
      [1,0,0,0,1],
      [0,1,1,1,0],
      [1,0,0,0,1],
      [0,0,0,0,0],
      [0,0,1,0,0],
    ],
    [
      [1,0,0,0,1],
      [0,0,1,0,0],
      [1,0,1,0,1],
      [0,1,0,1,0],
      [0,0,0,0,0],
    ],
    [
      [0,0,0,1,0],
      [0,0,1,0,1],
      [0,1,0,1,0],
      [1,0,1,0,0],
      [0,1,0,0,0],
    ],
    [
      [0,0,0,0,1],
      [0,0,0,1,1],
      [0,0,1,0,1],
      [0,0,1,1,0],
      [0,0,1,0,0],
    ],
    [
      [0,1,1,0,0],
      [1,0,0,1,0],
      [1,1,0,1,1],
      [1,0,0,1,0],
      [0,1,1,0,0],
    ],
    [
      [0,0,1,1,0],
      [1,1,0,0,1],
      [1,0,0,0,1],
      [1,0,0,1,0],
      [1,1,1,1,0],
    ],
    [
      [0,1,0,1,0],
      [1,1,0,1,1],
      [0,1,0,1,0],
      [0,0,1,0,0],
      [0,1,0,1,0],
    ],
    [
      [0,0,1,0,0],
      [0,1,0,1,0],
      [1,0,1,0,1],
      [0,1,0,1,0],
      [0,0,1,0,0],
    ],
    [
      [0,1,1,1,0],
      [0,0,0,0,0],
      [0,1,1,1,0],
      [0,0,0,0,0],
      [0,1,1,1,0],
    ],
    [
      [1,1,0,0,0],
      [0,0,1,0,0],
      [1,0,1,1,0],
      [0,0,1,0,0],
      [1,1,0,0,0],
    ],
    [
      [0,0,1,1,1],
      [0,0,1,0,1],
      [0,0,0,1,0],
      [0,1,1,0,0],
      [1,1,0,0,0],
    ],
    [
      [0,1,0,0,1],
      [1,0,0,0,1],
      [0,0,0,1,1],
      [0,0,1,0,0],
      [1,1,1,0,0],
    ],
    [
      [0,0,0,1,1],
      [0,0,1,0,0],
      [0,1,1,0,1],
      [1,0,0,1,0],
      [1,0,1,0,0],
    ],
    [
      [0,1,1,1,1],
      [1,0,1,1,0],
      [1,1,1,1,0],
      [0,1,0,1,0],
      [1,1,0,1,0],
    ],
    [
      [0,1,1,0,1],
      [0,0,0,0,1],
      [1,0,1,1,0],
      [0,1,1,0,0],
      [1,1,0,1,0],
    ],
    [
      [0,0,0,1,1],
      [1,0,1,0,1],
      [0,0,1,1,1],
      [0,0,0,0,0],
      [1,0,1,1,0],
    ],
    [
      [0,0,1,1,1],
      [0,1,1,1,0],
      [1,1,1,0,0],
      [0,0,0,0,0],
      [1,1,0,0,0],
    ],
    [
      [1,1,0,0,0],
      [0,0,1,0,0],
      [1,0,1,1,0],
      [1,0,0,1,0],
      [0,1,1,1,0],
    ],
    [
      [0,1,0,1,0],
      [1,1,0,1,1],
      [0,0,0,1,0],
      [1,1,1,0,0],
      [0,1,0,0,0],
    ],
    [
      [0,1,1,0,1],
      [1,0,0,0,1],
      [1,0,1,1,0],
      [0,0,1,0,0],
      [1,1,0,0,0],
    ],
    [
      [1,1,0,0,1],
      [1,0,1,1,0],
      [1,0,0,0,1],
      [1,1,0,0,0],
      [0,0,1,1,0],
    ],
    [
      [1,0,1,0,0],
      [0,1,0,0,1],
      [0,1,0,0,1],
      [1,0,0,1,0],
      [1,1,1,1,0],
    ],
    [
      [1,0,0,0,1],
      [1,1,0,0,1],
      [1,0,1,0,0],
      [1,1,0,1,0],
      [0,0,1,1,0],
    ],
    [
      [0,1,0,1,0],
      [1,1,1,1,0],
      [1,0,1,1,0],
      [1,1,1,1,0],
      [1,0,1,1,0],
    ],
    [
      [1,0,0,1,1],
      [1,1,1,1,1],
      [1,0,1,1,1],
      [1,1,1,0,0],
      [0,1,0,0,0],
    ],
    [
      [1,0,0,1,0],
      [1,1,0,1,1],
      [1,1,0,0,0],
      [0,1,1,1,0],
      [1,0,0,1,0],
    ],
    [
      [0,0,1,0,0],
      [0,1,1,1,0],
      [1,1,1,1,1],
      [0,1,1,1,0],
      [0,0,1,0,0],
    ],
    [
      [0,1,0,1,0],
      [0,1,1,1,0],
      [1,0,1,0,1],
      [0,1,1,1,0],
      [0,1,0,1,0],
    ],
    [
      [0,1,1,0,1],
      [1,1,0,1,1],
      [1,1,1,0,1],
      [0,1,0,1,0],
      [0,0,0,0,0],
    ],
    [
      [1,1,1,0,0],
      [0,1,0,1,0],
      [0,0,1,1,1],
      [0,1,0,1,0],
      [1,1,1,0,0],
    ],
    [
      [0,0,1,1,1],
      [1,1,0,1,1],
      [0,1,1,0,1],
      [0,1,1,1,0],
      [1,1,1,0,0],
    ],
    [
      [0,0,0,0,1],
      [1,1,1,1,1],
      [1,1,1,0,1],
      [0,1,0,1,0],
      [1,0,1,0,0],
    ],
    [
      [0,0,1,1,1],
      [1,1,0,1,1],
      [1,1,1,0,1],
      [0,1,1,1,0],
      [0,0,0,0,0],
    ],
    [
      [1,0,0,1,0],
      [1,1,1,1,1],
      [0,0,1,1,1],
      [0,1,0,1,0],
      [1,1,0,0,0],
    ],
    [
      [0,1,1,0,1],
      [1,1,1,1,1],
      [1,0,1,1,1],
      [0,1,0,1,0],
      [1,0,0,1,0],
    ],
    [
      [0,1,0,0,1],
      [1,1,0,1,1],
      [0,0,1,1,1],
      [0,1,1,1,0],
      [1,1,1,0,0],
    ],
    [
      [0,1,0,0,1],
      [1,1,0,1,1],
      [1,0,1,1,0],
      [1,1,1,1,0],
      [1,0,0,1,0],
    ],
    [
      [0,1,0,0,1],
      [1,1,1,1,1],
      [1,0,1,1,0],
      [0,1,0,1,0],
      [1,1,1,0,0],
    ],
    [
      [0,0,1,1,1],
      [1,1,0,1,1],
      [0,1,1,0,1],
      [0,1,1,1,0],
      [1,0,0,1,0],
    ],
    [
      [0,0,0,1,1],
      [1,1,0,1,1],
      [1,1,1,0,0],
      [0,1,1,1,0],
      [1,0,1,1,0],
    ],
  ]

  const output = grids.map((grid, i) => {
    const inBounds = (r: number, c: number) => {
      return r >= 0 && r <= 4 && c >= 0 && c <= 4;
    }
    const newGrid = new Array(5).fill(0).map(() => new Array(5).fill(0));
    const directions = [[-1,0],[1,0],[0,-1],[0,1]];
    const toggleNeighbors = (r: number, c: number) => {
      newGrid[r][c] = newGrid[r][c] === 1 ? 0 : 1;
      directions.forEach(([dr,dc]) => {
        const nr = r + dr;
        const nc = c + dc;
        if (inBounds(nr,nc)) {
          newGrid[nr][nc] = newGrid[nr][nc] === 1 ? 0 : 1;
        }
      })
    }
    const pattern: number[] = [];
    let queue: [number, number][] = [];
    grid.forEach((row, r) =>
      row.forEach((cell, c) => {
        if (cell === 1) {
          queue.push([r,c]);
          
        }
      })
    );
    while (queue.length > 0) {
      const [r,c] = queue.pop()!;
      toggleNeighbors(r,c);
    }
    newGrid.forEach((row, r) =>
      row.forEach((cell, c) => {
        if (cell === 1) {
          pattern.push(rcToLinear(r,c));
        }
      })
    );
    return {
      level: i + 1,
      pattern,
      minMoves: Math.floor(i/5) + 6
    };
  });
  
  console.log(JSON.stringify(output, null, 2));